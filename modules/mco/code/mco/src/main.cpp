#include <Arduino.h>
#include <SoftwareSerial.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "utils.h"
#include "SimpleMIDI.h"
#include "CustomOscillator.h"

#define GATE_PIN PIN_PA7
#define LOGGER_PIN_TX PIN_PB4

SimpleMIDI MIDI;
SoftwareSerial logger = SoftwareSerial(-1, LOGGER_PIN_TX);

const int8_t sineTable[2048] = {
-127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126,
-125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124,
-124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122,
-122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121,
-121, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119,
-119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118, -117,
-117, -117, -117, -117, -117, -117, -117, -116, -116, -116, -116, -116, -116,
-116, -116, -115, -115, -115, -115, -115, -115, -115, -115, -114, -114, -114,
-114, -114, -114, -114, -114, -113, -113, -113, -113, -113, -113, -113, -113,
-112, -112, -112, -112, -112, -112, -112, -112, -111, -111, -111, -111, -111,
-111, -111, -111, -110, -110, -110, -110, -110, -110, -110, -110, -110, -109,
-109, -109, -109, -109, -109, -109, -109, -108, -108, -108, -108, -108, -108,
-108, -108, -107, -107, -107, -107, -107, -107, -107, -107, -106, -106, -106,
-106, -106, -106, -106, -106, -105, -105, -105, -105, -105, -105, -105, -105,
-104, -104, -104, -104, -104, -104, -104, -104, -103, -103, -103, -103, -103,
-103, -103, -103, -102, -102, -102, -102, -102, -102, -102, -102, -101, -101,
-101, -101, -101, -101, -101, -101, -100, -100, -100, -100, -100, -100, -100,
-100, -99, -99, -99, -99, -99, -99, -99, -99, -98, -98, -98, -98, -98, -98, -98,
-98, -97, -97, -97, -97, -97, -97, -97, -97, -96, -96, -96, -96, -96, -96, -96,
-96, -95, -95, -95, -95, -95, -95, -95, -95, -94, -94, -94, -94, -94, -94, -94,
-94, -93, -93, -93, -93, -93, -93, -93, -93, -93, -92, -92, -92, -92, -92, -92,
-92, -92, -91, -91, -91, -91, -91, -91, -91, -91, -90, -90, -90, -90, -90, -90,
-90, -90, -89, -89, -89, -89, -89, -89, -89, -89, -88, -88, -88, -88, -88, -88,
-88, -88, -87, -87, -87, -87, -87, -87, -87, -87, -86, -86, -86, -86, -86, -86,
-86, -86, -85, -85, -85, -85, -85, -85, -85, -85, -84, -84, -84, -84, -84, -84,
-84, -84, -83, -83, -83, -83, -83, -83, -83, -83, -82, -82, -82, -82, -82, -82,
-82, -82, -81, -81, -81, -81, -81, -81, -81, -81, -80, -80, -80, -80, -80, -80,
-80, -80, -79, -79, -79, -79, -79, -79, -79, -79, -78, -78, -78, -78, -78, -78,
-78, -78, -77, -77, -77, -77, -77, -77, -77, -77, -76, -76, -76, -76, -76, -76,
-76, -76, -76, -75, -75, -75, -75, -75, -75, -75, -75, -74, -74, -74, -74, -74,
-74, -74, -74, -73, -73, -73, -73, -73, -73, -73, -73, -72, -72, -72, -72, -72,
-72, -72, -72, -71, -71, -71, -71, -71, -71, -71, -71, -70, -70, -70, -70, -70,
-70, -70, -70, -69, -69, -69, -69, -69, -69, -69, -69, -68, -68, -68, -68, -68,
-68, -68, -68, -67, -67, -67, -67, -67, -67, -67, -67, -66, -66, -66, -66, -66,
-66, -66, -66, -65, -65, -65, -65, -65, -65, -65, -65, -64, -64, -64, -64, -64,
-64, -64, -64, -63, -63, -63, -63, -63, -63, -63, -63, -62, -62, -62, -62, -62,
-62, -62, -62, -61, -61, -61, -61, -61, -61, -61, -61, -60, -60, -60, -60, -60,
-60, -60, -60, -59, -59, -59, -59, -59, -59, -59, -59, -59, -58, -58, -58, -58,
-58, -58, -58, -58, -57, -57, -57, -57, -57, -57, -57, -57, -56, -56, -56, -56,
-56, -56, -56, -56, -55, -55, -55, -55, -55, -55, -55, -55, -54, -54, -54, -54,
-54, -54, -54, -54, -53, -53, -53, -53, -53, -53, -53, -53, -52, -52, -52, -52,
-52, -52, -52, -52, -51, -51, -51, -51, -51, -51, -51, -51, -50, -50, -50, -50,
-50, -50, -50, -50, -49, -49, -49, -49, -49, -49, -49, -49, -48, -48, -48, -48,
-48, -48, -48, -48, -47, -47, -47, -47, -47, -47, -47, -47, -46, -46, -46, -46,
-46, -46, -46, -46, -45, -45, -45, -45, -45, -45, -45, -45, -44, -44, -44, -44,
-44, -44, -44, -44, -43, -43, -43, -43, -43, -43, -43, -43, -42, -42, -42, -42,
-42, -42, -42, -42, -42, -41, -41, -41, -41, -41, -41, -41, -41, -40, -40, -40,
-40, -40, -40, -40, -40, -39, -39, -39, -39, -39, -39, -39, -39, -38, -38, -38,
-38, -38, -38, -38, -38, -37, -37, -37, -37, -37, -37, -37, -37, -36, -36, -36,
-36, -36, -36, -36, -36, -35, -35, -35, -35, -35, -35, -35, -35, -34, -34, -34,
-34, -34, -34, -34, -34, -33, -33, -33, -33, -33, -33, -33, -33, -32, -32, -32,
-32, -32, -32, -32, -32, -31, -31, -31, -31, -31, -31, -31, -31, -30, -30, -30,
-30, -30, -30, -30, -30, -29, -29, -29, -29, -29, -29, -29, -29, -28, -28, -28,
-28, -28, -28, -28, -28, -27, -27, -27, -27, -27, -27, -27, -27, -26, -26, -26,
-26, -26, -26, -26, -26, -25, -25, -25, -25, -25, -25, -25, -25, -25, -24, -24,
-24, -24, -24, -24, -24, -24, -23, -23, -23, -23, -23, -23, -23, -23, -22, -22,
-22, -22, -22, -22, -22, -22, -21, -21, -21, -21, -21, -21, -21, -21, -20, -20,
-20, -20, -20, -20, -20, -20, -19, -19, -19, -19, -19, -19, -19, -19, -18, -18,
-18, -18, -18, -18, -18, -18, -17, -17, -17, -17, -17, -17, -17, -17, -16, -16,
-16, -16, -16, -16, -16, -16, -15, -15, -15, -15, -15, -15, -15, -15, -14, -14,
-14, -14, -14, -14, -14, -14, -13, -13, -13, -13, -13, -13, -13, -13, -12, -12,
-12, -12, -12, -12, -12, -12, -11, -11, -11, -11, -11, -11, -11, -11, -10, -10,
-10, -10, -10, -10, -10, -10, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8,
-8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -7, -7, -7, -6, -6, -6, -6, -6, -6, -6,
-6, -5, -5, -5, -5, -5, -5, -5, -5, -4, -4, -4, -4, -4, -4, -4, -4, -3, -3, -3,
-3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1,
-1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3,
3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6,
6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,
9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12,
12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14,
14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17,
17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19,
19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22,
22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24,
24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27,
27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29,
29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 32,
32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34,
34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 37,
37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39,
39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 42,
42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44,
44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46,
47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49,
49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51,
52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54,
54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56,
57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59,
59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61,
61, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66,
66, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71,
71, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74,
74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76,
76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 79, 79,
79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81,
81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 84, 84,
84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86,
86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89,
89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91,
91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94,
94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96,
96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 99,
99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101,
101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103,
103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105,
105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107,
107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109,
109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111,
111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 113,
113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 115,
115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 117,
117, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 118, 119,
119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 121,
121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 123,
123, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 124, 124, 124, 125,
125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 127,
127, 127, 127, 127,
 }; 

CustomOscillator oscillator(sineTable, 2048, 10000);

void setupTimer() {
    TCB0.CTRLA |= TCB_ENABLE_bm; // counting value

    // Uses 20Mhz clock & divide it by for here
    // So, 1 tick is 0.1us
    TCB0.CTRLA |= TCB_CLKSEL_CLKDIV2_gc; // clock div by 2

    // The intruppt is runnign at every 100us
    TCB0.CCMP = 1000; // Set the compare value
  
    // Enabling inturrupts
    TCB0.CTRLB |= TCB_CNTMODE_INT_gc; // Timer interrupt mode (periodic interrupts)
    TCB0.INTCTRL = TCB_CAPT_bm; // Enable Capture interrupt
    sei();
}

bool read = false;
// TCB0 Interrupt Service Routine
ISR(TCB0_INT_vect) {
  read = true;

  // Clear the interrupt flag∫
  TCB0.INTFLAGS = TCB_CAPT_bm;
}

void setup() {
  // define the gate pin
  pinMode(GATE_PIN, OUTPUT);
  digitalWrite(GATE_PIN, LOW);

  // Setup Logger
  pinMode(LOGGER_PIN_TX, OUTPUT);
  logger.begin(9600);
  
  // Set the analog reference for ADC with supply voltage.
  analogReference(VDD);
 
  // DAC0 setup for sending velocity via the PA6 pin
  VREF.CTRLA |= VREF_DAC0REFSEL_4V34_gc; //this will force it to use VDD as the VREF
  VREF.CTRLB |= VREF_DAC0REFEN_bm;
  DAC0.CTRLA = DAC_ENABLE_bm | DAC_OUTEN_bm;
  DAC0.DATA = 0;

  // Setup MIDI
  MIDI.begin(31250);

  setupTimer();
  oscillator.setFrequency(1000);

  logger.println("MCO 0.2.0 Started!");
}

void loop() {
  // parse incoming MIDI messages
   if (MIDI.read()) {
      uint8_t type = MIDI.getType();
      uint8_t channel = MIDI.getChannel();
      uint8_t data1 = MIDI.getData1();
      uint8_t data2 = MIDI.getData2();

      // Debug output
      if (type == MIDI_NOTE_ON) {
        float freq = midiToFrequency(data1);
        oscillator.setFrequency(freq);
        logger.printf("NOTE ON: %d, %d, %ld\n", data1, (int)freq, oscillator.phaseIncrement);
        digitalWrite(GATE_PIN, HIGH);
      } else if (type == MIDI_NOTE_OFF) {
        digitalWrite(GATE_PIN, LOW);
      } else if (type == MIDI_CONTROL_CHANGE) {
          
      } else {
          logger.print("Unknown | ");
      }
  }

  if (read) {
    // Output sine wave to DAC
    DAC0.DATA = oscillator.next() + 127;
    read = false;
  }
}
